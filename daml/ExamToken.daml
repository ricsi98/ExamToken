module ExamToken where

import DA.Assert
import DA.Date


-- Fizetőeszköz
template ExamCoin
    with
        issuer : Party
        owner : Party
        amount : Int
    where
        signatory  issuer, owner

        controller owner can
            Transfer : ContractId ExamCoinTransfer
                with newOwner : Party
                do
                    create ExamCoinTransfer with
                        examCoin = this
                        newOwner

        controller owner can
            Split : (ContractId ExamCoin, ContractId ExamCoin)
                with at : Int
                do
                    let other = amount - at
                    assert (at > 0)
                    assert (other > 0)
                    first <- create this with amount = at
                    second <- create this with amount = other
                    return (first, second)

-- Fizetőeszköz utalás
template ExamCoinTransfer
    with
        examCoin : ExamCoin
        newOwner : Party
    where
        signatory examCoin.issuer, examCoin.owner

        controller newOwner can
            Accept : ContractId ExamCoin
                do
                    create examCoin with owner = newOwner

type ExamSlotKey = (Party, Text, Date)

template ExamSlot
    with
        examIssuer : Party
        owner : Party
        examName : Text
        examDate : Date
        invitedStudents : [Party]
        price : Int
        canBeSold : Bool
    where
        signatory owner, examIssuer
        observer invitedStudents, examIssuer

        key (owner, examName, examDate) : ExamSlotKey
        maintainer key._1

        choice Destroy : ()
            controller examIssuer
                do return()

        choice SetPrice : ContractId ExamSlot
            with newPrice : Int
            controller owner
                do
                    create this with 
                        price = newPrice
                        canBeSold = True

        choice Buy : (ContractId ExamSlot, ContractId ExamCoin)
            with 
                coinCid : ContractId ExamCoin
                newOwner : Party
            controller newOwner
                do
                    -- Csak akkor veheti meg, ha meg nincs erre a vizsgara
                    otherSlot <- lookupByKey @ExamSlot (newOwner, examName, examDate)
                    otherSlot === None

                    coin <- fetch coinCid

                    coin.amount === price

                    assert canBeSold

                    slotCid <- create this with 
                        owner = newOwner
                        price = 0
                        canBeSold = False
                    coinCid_ <- create coin with 
                        owner = this.owner

                    archive coinCid

                    return (slotCid, coinCid_)



        

template Exam
    with 
        issuer : Party
        name : Text
        date : Date
        remainingSlots : Int
        invitedStudents : [Party]
    where
        signatory issuer
        observer invitedStudents, issuer

        choice TakeSlot : (ContractId ExamSlot, ContractId Exam)
            with student: Party
            controller student
            do
                remainingSlots =/= 0

                -- Csak akkor veheti fel, ha meg nincs erre a vizsgara
                slotId <- lookupByKey @ExamSlot (student, name, date)
                slotId === None

                slotCid <- create ExamSlot with
                    owner = student
                    examName = this.name
                    examDate = this.date
                    invitedStudents = this.invitedStudents
                    examIssuer = issuer
                    price = 0
                    canBeSold = False

                examCid <- create this with
                    remainingSlots = remainingSlots - 1
                
                return (slotCid, examCid)
                

burn_exam_slot : Scenario()

burn_exam_slot = scenario do
    student <- getParty "Student"
    bme <- getParty "BME"

    -- Letrehozza az egyetem a vizsgat
    examCid <- submit bme do
        create Exam with 
            issuer = bme
            name = "Vizsga"
            date = DA.Date.date 2020 Sep 30
            remainingSlots = 10
            invitedStudents = [student]


    -- A student elfoglal egy slotot a vizsgan
    (slotCid, examCid) <- submit student do
        exercise examCid TakeSlot with
            student = student

    -- Az egyetem elegeti a slotot
    submit bme do
        exercise slotCid Destroy

    return()


cant_buy_exam_slot_without_price_set : Scenario()

cant_buy_exam_slot_without_price_set = scenario do
    student <- getParty "Student"
    s2 <- getParty "Student2"
    bme <- getParty "BME"

    -- Letrehozza az egyetem a vizsgat
    examCid <- submit bme do
        create Exam with 
            issuer = bme
            name = "Vizsga"
            date = DA.Date.date 2020 Sep 30
            remainingSlots = 10
            invitedStudents = [student, s2]

    -- Az egyetem letrehoz coint
    coinCid <- submit bme do
        create ExamCoin with
            owner = bme
            issuer = bme
            amount = 100

    -- Az egyetem odaadja a coint a s2-nek
    transferCid <- submit bme do
        exercise coinCid Transfer with
            newOwner = s2

    -- s2 elfogadja a coint
    coinCid <- submit s2 do
        exercise transferCid Accept

    -- A student elfoglal egy slotot a vizsgan
    (slotCid, examCid) <- submit student do
        exercise examCid TakeSlot with
            student = student

    -- Az s2 probalja megvenni a slotot, de nem tudja, mivel nem lett engedelyezve
    --      az eladas (setPrice kell elottenincs beallitva az ar)
    submitMustFail s2 do
        exercise slotCid Buy with
            coinCid = coinCid
            newOwner = s2    
    return()


take_exam_slot : Scenario()

take_exam_slot = scenario do
    student <- getParty "Student"
    s2 <- getParty "Student2"
    bme <- getParty "BME"

    -- Letrehozza az egyetem a vizsgat
    examCid <- submit bme do
        create Exam with 
            issuer = bme
            name = "Vizsga"
            date = DA.Date.date 2020 Sep 30
            remainingSlots = 10
            invitedStudents = [student, s2]

    -- Az egyetem letrehoz coint
    coinCid <- submit bme do
        create ExamCoin with
            owner = bme
            issuer = bme
            amount = 100

    -- Az egyetem odaadja a coint s2-nek
    transferCid <- submit bme do
        exercise coinCid Transfer with
            newOwner = s2

    -- s2 elfogadja a coint
    coinCid <- submit s2 do
        exercise transferCid Accept

    -- A student elfoglal egy slotot a vizsgan
    (slotCid, examCid) <- submit student do
        exercise examCid TakeSlot with
            student = student

    -- A student beallitja a slot arat
    slotCid <- submit student do
        exercise slotCid SetPrice with
            newPrice = 100

    -- Az s2 megveszi a slotot
    (slotCid, coinCid) <- submit s2 do
        exercise slotCid Buy with
            coinCid = coinCid
            newOwner = s2    
    

    return()



create_coin : Scenario()

create_coin = scenario do
    bme <- getParty "BME"
    student <- getParty "Student"

    ecCid <- submit bme do
        create ExamCoin with
            issuer = bme
            owner = bme
            amount = 100

    transferEcCid <- submit bme do
        exercise ecCid Transfer with newOwner = student

    newEcId <- submit student do
        exercise transferEcCid Accept

    return()

only_owner_can_split_and_send : Scenario()

only_owner_can_split_and_send = scenario do
    bme <- getParty "BME"
    student <- getParty "Student"

    ecCid <- submit bme do
        create ExamCoin with
            issuer = bme
            owner = bme
            amount = 100
    
    submitMustFail student do
        exercise ecCid Transfer with newOwner = student

    submitMustFail student do
        exercise ecCid Split with at = 50

    return()



split_send_split : Scenario()

split_send_split = scenario do
    bme <- getParty "BME"
    student <- getParty "Student"

    ecCid <- submit bme do
        create ExamCoin with
            issuer = bme
            owner = bme
            amount = 100
    
    (ec1, ec2) <- submit bme do
        exercise ecCid Split with at = 60

    transferCid <- submit bme do
        exercise ec1 Transfer with newOwner = student

    studentsCoin <- submit student do
        exercise transferCid Accept

    submit student do
        exercise studentsCoin Split with at = 30

    return()